‚úÖ main.py
from models.yolo_model import YOLOModel
from models.anomaly_detector import AnomalyDetector
from utils.video_processing import process_video
from utils.alert_system import send_alert

def main():
    yolo = YOLOModel()
    detector = AnomalyDetector()
    
    for frame in process_video(0):  # 0 for webcam, or use video path
        results = yolo.detect(frame)
        
        if yolo.detect_threat(results):
            send_alert("Threat detected: Potential aggression or stalking behavior.")
        # Future: Add pose analysis, voice recognition, SOS detection

if __name__ == '__main__':
    main()


üß† models/yolo_model.py
import torch

class YOLOModel:
    def __init__(self, model_path='yolov5s.pt'):
        self.model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

    def detect(self, frame):
        return self.model(frame)

    def detect_threat(self, results):
        people = [x for x in results.xyxy[0] if int(x[-1]) == 0]  # Class 0 = person
        return len(people) > 3  # Simplified threat condition

‚ö†Ô∏è models/anomaly_detector.py
from sklearn.svm import OneClassSVM
import numpy as np

class AnomalyDetector:
    def __init__(self):
        self.model = OneClassSVM(gamma='scale', nu=0.1)

    def train(self, features):
        self.model.fit(features)

    def predict(self, features):
        return self.model.predict(features)


üé• utils/video_processing.py
import cv2

def process_video(source):
    cap = cv2.VideoCapture(source)
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        yield frame
    cap.release()


